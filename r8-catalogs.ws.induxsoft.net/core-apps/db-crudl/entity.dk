#include "dkli.dkh"
#!

module "Entity.dk"
{
    //Variables globales de configuración

    @table_name=""
    @keyfield="sys_pk"
    
    @read_query="select * from #<@table_name> where #<@keyfield>=@_entity_id limit 1;"
    @get_sys_pk="select sys_pk from #<@table_name> where #<@keyfield>=@_entity_id and ifnull(sys_deleted,0)=0 limit 1;"
    @list_query="select * from #<@table_name> where ifnull(sys_deleted,0)=0;"
    @base_path_model = "vfdhryhgfhfh"
    @sys_fields="sys_pk, sys_guid, sys_dtcreated, sys_timestamp, sys_recver,sys_deleted, sys_lock"
    @update_fields="*"
    @create_fields="*"

    @create_exclude_fields=""
    @update_exclude_fields=""

    @update_alias_fields=""
    @create_alias_fields=""

    @use_transaction=@true

    ref @childs=record.create()

    ref @custom_delete=@null

    //***********************************

    entity.safe_id::id
    {
        //Prevenir inyección de SQL 
        return ranychars(id,";'`"+'"',"_") 
    }

    entity.remove_fields::&data, &fields_list
    {
        if isnull(fields_list) || isnull(data) { return }

        for i=0;i<@count(fields_list)
        {
            if field.exist(data,trim(list.str(fields_list,i)))
            {
                do field.remove(data,trim(list.str(fields_list,i)))
            }
        }
    }

    entity.create::&db, &params, &data
    {
        @keyfield=entity.safe_id(field.dstr(params,"_key",@keyfield))
        if @table_name=="" { @table_name=entity.safe_id(@@(params,"_entities_type")) }
        ref create_data=record.copyex(data,@null,@create_fields,",",@create_alias_fields,",")
    
        //Limpiar create_data de los campos que sean 'childs'
        if not(isnull(@childs))
        {
            do entity.remove_fields(create_data, list.create_from_fields(@childs))
        }

        //Excluir campos que no deben afectarse
        if @create_exclude_fields!=""
        {
            do entity.remove_fields(create_data, split(@create_exclude_fields,","))
        }
        //////////////////////////////////////////////////////

        create_data<"sys_pk">:parse.num(@@(create_data,"sys_pk"))
        create_data<"sys_recver">:parse.num(@@(create_data,"sys_recver"))

        
        if @use_transaction { do dbr.begin(db) }
            // do rise_error(99,to.json(create_data))
        ref master=dbr.save(db,@table_name,create_data)
        if not(isnull(@childs))
        {
            ref fields=list.create_from_fields(@childs)
            for i=0;i<@count(fields)
            {
                if field.exist(data,list.str(fields,i))
                {
                    do dbr.updateDetails(db,@@(@childs,"&"+list.str(fields,i)),@@(master,"$sys_pk"), @@(data,"&"+list.str(fields,i)))
                }
            }
        }

        if @use_transaction { do dbr.commit(db) }

        exception
        {
            if @use_transaction {
                if dbr.in_transaction(db) { do dbr.rollback(db) }
            }
            do rise_error(500,last_error())
        }

        params<"_entity_id">:@@(master,@keyfield)
         that @read(db,params)->*obj

        
        return obj
    }

    entity.blank::&db, &params
    {
        return record.create()
    }

    entity.read:: &db, &params
    {

        if @table_name=="" { @table_name=entity.safe_id(@@(params,"_entities_type")) }
        @keyfield=entity.safe_id(field.dstr(params,"_key",@keyfield))
         // do rise_error(-99,to.json(params))
        ref master=dbr.rec(db,ftext(@read_query),params)
        
        if isnull(master) { do rise_error(404,"Elemento no encontrado: "+to.json(params))}
        if not(isnull(@childs))
        {
            ref fields=list.create_from_fields(@childs)
            ref p=record.copy(master,"*")

            for i=0;i<@count(fields)
            {
                master<list.str(fields,i)+"*">:dbr.list(db,@@(@childs,list.str(fields,i)+"/select_query"),p)
            }
        }

        return master
    }

    entity.update::&db, &params, &data
    {
        @keyfield=entity.safe_id(field.dstr(params,"_key",@keyfield))
        if @table_name=="" { @table_name=entity.safe_id(@@(params,"_entities_type")) }
        ref update_data=record.copyex(data,@null,@update_fields,",",@update_alias_fields,",")

        //Limpiar create_data de los campos que sean 'childs'
        if not(isnull(@childs))
        {
            do entity.remove_fields(update_data, list.create_from_fields(@childs))
        }
        
        //Excluir campos que no deben afectarse
        if @update_exclude_fields!=""
        {
            do entity.remove_fields(update_data, split(@update_exclude_fields,","))
        }
        //////////////////////////////////////////////////////

        if @@(params,"_entity_id")==""
        {
            if not (field.exist(data,"sys_pk")) && not(field.exist(data,"sys_guid")) { do rise_error(404,"No se ha indicado la identidad de la entidad") }
            if field.exist(data,"sys_pk") { update_data<"sys_pk">:@@(data,"#sys_pk") }
            if field.exist(data,"sys_guid") { update_data<"sys_guid">:@@(data,"$sys_guid") }
        }
        else
        {
            @keyfield=entity.safe_id(field.dstr(params,"_key",@keyfield))
            if not(isanyword(tolower(@keyfield),"sys_pk,sys_guid"))
            {
                sys_pk= dbr.num(db,ftext(@get_sys_pk),params)
                if (sys_pk<1) { do rise_error(404,"Id no encontrado") }
                update_data<"sys_pk">: sys_pk
                if field.exist(update_data,"sys_guid") { do field.remove(update_data,"sys_guid") }
            }
            else
            {
                if @keyfield=="sys_pk" && field.exist(update_data,"sys_guid") { do field.remove(update_data,"sys_guid")  }
                if @keyfield=="sys_guid" && field.exist(update_data,"sys_pk") { do field.remove(update_data,"sys_pk")  }
                update_data<@keyfield>: @@(params,"_entity_id")
            }
        }

        if @use_transaction { do dbr.begin(db) }

        ref master=dbr.save(db,@table_name,update_data)

        if not(isnull(@childs))
        {
            ref fields=list.create_from_fields(@childs)
            for i=0;i<@count(fields)
            {
                if field.exist(data,list.str(fields,i))
                {
                    do dbr.updateDetails(db,@@(@childs,"&"+list.str(fields,i)),@@(master,"$sys_pk"), @@(data,"&"+list.str(fields,i)))
                }
            }
        }

        if @use_transaction { do dbr.commit(db) }

        exception
        {
            if @use_transaction {
                if dbr.in_transaction(db) { do dbr.rollback(db) }
            }
            do rise_error(500,last_error())
        }

        //params<"_entity_id">:@@(master,@keyfield)
        that @read(db,params)->*obj
        return obj
    }

    entity.delete::&db, &params
    {
        if @table_name=="" { @table_name=entity.safe_id(@@(params,"_entities_type")) }

        if @@(params,"_entity_id")==""
        {
            if not (field.exist(data,"sys_pk")) && not(field.exist(data,"sys_guid")) { do rise_error(404,"No se ha indicado la identidad de la entidad") }
        }
        else
        {
            @keyfield=entity.safe_id(field.dstr(params,"_key",@keyfield))
            if tolower(@keyfield)!="sys_pk"
            {
                sys_pk= dbr.num(db,ftext(@get_sys_pk),params)
                if (sys_pk<1) { do rise_error(404,"Id no encontrado") }
            }
            else
            {
                sys_pk=parse.num(@@(params,"$_entity_id"))
            }
        }

        if @use_transaction { do dbr.begin(db) }
        if not(isnull(@custom_delete)) { that @custom_delete(db,@table_name,sys_pk) }
        else 
        {
            new p{@"sys_pk":sys_pk}
            do dbr.delete(db,@table_name,"sys_pk=@sys_pk",p) 
        }
        
        if @use_transaction { do dbr.commit(db) }
        exception
        {
            if @use_transaction {
                if dbr.in_transaction(db) { do dbr.rollback(db) }
            }
            do rise_error(500,last_error())
        }

        return @null
    }

    entity.list::&db, &params
    {
        if @table_name=="" { @table_name=entity.safe_id(@@(params,"_entities_type")) }
        return dbr.list(db,ftext(@list_query),params)
    }

    entity.child::table,join,select_query 
    { 
        ref obj=dbr.detailInfoData(table,join) 
        obj<"select_query">:trim(select_query)
        return obj
    }

    dbr.detailInfoData::table, join
   {
       new detailInfoTable
        {
            @"keyfield":"sys_pk"
            @"joinfield":join
            @"table":table
        }

        return detailInfoTable
   }
    
    dbr.buildDeleteDetailEntity::&info
    {
        return "delete from "+field.str(info,"table") + " where "+field.str(info,"keyfield")+"=@"+field.str(info,"keyfield")+";"
    }

    dbr.buildSelectDetailEntities::&info
    {
        return "select "+field.str(info,"keyfield") + " from "+field.str(info,"table") + " where "+field.str(info,"joinfield")+"=@"+field.str(info,"joinfield")+";"
    }

    dbr.ExistEntityInList::&data,keyfield, keyvalue
    {
        if isnull(data){ return @false}
        for i=0;i<list.count(data)
        {
            ref rw=list.obj(data,i)

            if field.dstr(rw,keyfield,"")==keyvalue { return @true }
        }

        return @false
    }

    dbr.updateDetails::&db,&info,masterkey, &data
    {
        new p {}

        p<field.str(info,"joinfield")>:masterkey

        ref current_data=dbr.table(db,dbr.buildSelectDetailEntities(info),p)

        if table.rows(current_data)>0
        {
            for i=0;i<table.rows(current_data)
            {
                if not(dbr.ExistEntityInList(data,field.str(info,"keyfield"),cell.dstr(current_data, i, 0,"")))
                {
                    ref dr=row.get(current_data,i)
                    do dbr.execute(db,dbr.buildDeleteDetailEntity(info),dr)
                }
            }
        }

        for i=0;i<list.count(data)
        {
            ref rw=list.obj(data,i)

            if field.dstr(info,"fields","*")!="*"
            {
                ref rw=record.copy(rw,field.str(info,"fields"))
            }

            if not(field.exist(rw,field.str(info,"joinfield")))
            {
                rw<field.str(info,"joinfield")>:masterkey
            }

            rw<"sys_pk">:parse.num(field.dstr(rw,"sys_pk","0")) 
            rw<"sys_recver">:parse.num(field.dstr(rw,"sys_recver","0"))
            
            
            do dbr.save(db,field.str(info,"table"),rw)
        }
    }

    point @create 	to entity.create
	point @read		to entity.read
	point @update 	to entity.update
	point @delete 	to entity.delete
	point @list		to entity.list
    point @blank	to entity.blank
}
